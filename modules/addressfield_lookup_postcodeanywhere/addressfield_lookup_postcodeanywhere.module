<?php

/**
 * @file
 * Provides a PostcodeAnywhere based address field lookup service.
 */

/**
 * Implements hook_menu().
 */
function addressfield_lookup_postcodeanywhere_menu() {
  $items = array();

  $items['admin/config/regional/addressfield-lookup/postcodeanywhere/configure'] = array(
    'title' => 'Postcode Anywhere Settings',
    'description' => 'Configure postcode anywhere.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('addressfield_lookup_postcodeanywhere_config_form'),
    'access arguments' => array('administer addressfield lookup services'),
    'file' => 'includes/addressfield_lookup_postcodeanywhere.admin.inc',
    'weight' => -10,
  );

  return $items;
}

/**
 * Implements hook_addressfield_lookup_postcodeanywhere().
 */
function addressfield_lookup_postcodeanywhere_addressfield_lookup_service_info() {
  return array(
    'postcodeanywhere' => array(
      'name' => t('Postcode Anywhere'),
      'class' => 'AddressFieldLookupPostcodeAnywhere',
      'object factory' => 'addressfield_lookup_postcodeanywhere_create',
      'description' => t('Provides an address field lookup service based on integration with the PCA Predict (formerly Postcode Anywhere) API.'),
      'config path' => 'admin/config/regional/addressfield-lookup/postcodeanywhere/configure',
      'test data' => 'LL11 5HJ',
    ),
  );
}

/**
 * Factory function: creates the postcode anywhere lookup service object.
 *
 * @param array $service_info
 *   Config array describing the lookup service.
 * @param string $country
 *   ISO2 code of the country to get addresses in.
 *
 * @return AddressFieldLookupInterface
 *   The instantiated lookup class.
 *
 * @see hook_addressfield_lookup_service_info()
 */
function addressfield_lookup_postcodeanywhere_create($service_info, $country = 'GB') {
  global $language;

  $postcode_anywhere_service = &drupal_static(__FUNCTION__);

  // Check the postcode anywhere configuration variables exist.
  if (!variable_get('addressfield_lookup_postcodeanywhere_license', NULL)) {
    throw new Exception('Postcode Anywhere has not been configured.');
  }

  // Instantiate the API class.
  if (!isset($postcode_anywhere_service[$country])) {
    $pca_predict = new PCAPredictAdapter(variable_get('addressfield_lookup_postcodeanywhere_license', NULL), variable_get('addressfield_lookup_postcodeanywhere_login', NULL), $language->name, 'PostalCodes', $country);
    $postcode_anywhere_service[$country] = new $service_info['class']($pca_predict);
  }

  return $postcode_anywhere_service[$country];
}

/**
 * Implements hook_addressfield_lookup_format_update().
 */
function addressfield_lookup_postcodeanywhere_addressfield_lookup_format_update($format, $address) {
  // Add new GB address elements if the address country is GB.
  if ($address['country'] == 'GB') {
    // Add the 'sub premise' element if it is not defined.
    if (empty($format['street_block']['sub_premise'])) {
      $format['street_block']['sub_premise'] = array(
        '#title' => t('Flat No.'),
        '#tag' => 'div',
        '#attributes' => array('class' => array('sub-premise')),
        '#size' => 30,
        '#weight' => -10,
      );

      // Re-order the form elements considering 'sub premise' element.
      $format['street_block']['premise']['#weight'] = -9;
    }

    // Add the 'dependent locality' element if it is not defined.
    if (empty($format['locality_block']['dependent_locality'])) {
      $format['locality_block']['dependent_locality'] = array(
        '#title' => t('Address 2'),
        '#tag' => 'div',
        '#attributes' => array('class' => array('dependent-locality')),
        '#size' => 30,
      );
    }

    // Rename the form elements considering 'dependent locality' element.
    $format['street_block']['premise']['#title'] = t('House Name/Building');
  }
  else {
    // Remove all address field lookup elements if this is not a country that
    // is supported by the PCA Predict API.
    if (empty($address['country']) || !addressfield_lookup_postcodeanywhere_is_country_supported($address['country'])) {
      foreach ($format as $element_name => $element) {
        if (stristr($element_name, 'addressfield_lookup')) {
          unset($format[$element_name]);
        }
      }

      // Reset the address field lookup mode.
      unset($address['addressfield_lookup_mode']);

      // Ensure all normal address elements are visible.
      $format['street_block']['#access'] = TRUE;
      $format['locality_block']['#access'] = TRUE;
      $format['name_block']['#access'] = TRUE;
      $format['organisation_block']['#access'] = TRUE;
    }
  }

  return $format;
}

/**
 * Is the country supported by the postcode anywhere API?
 *
 * @param string $country
 *   ISO Country code.
 *
 * @return bool
 *   Is the country in the supported list.
 */
function addressfield_lookup_postcodeanywhere_is_country_supported($country) {
  return in_array($country, array_keys(_addressfield_lookup_postcodeanywhere_get_countries()));
}

/**
 * Get the list of supported countries from the PCA Predict API.
 *
 * @param int $quality
 *   The level of quality the API provides, 1 (worst) to 5 (best).
 *
 * @return array
 *   Array of ISO2 country codes.
 */
function _addressfield_lookup_postcodeanywhere_get_countries($quality = 4, $reset = FALSE) {
  global $language;

  $countries = &drupal_static(__FUNCTION__);

  // Check if we have statically cached countries and no reset flag was passed.
  if (isset($countries) && !$reset) {
    return $countries;
  }

  // Build the cache ID we'll use for the countries list.
  $countries_cache_id = 'pcapredict:countries:' . $quality;

  // Check the cache bin for the address details.
  if (($cached_countries = cache_get($countries_cache_id, 'cache_addressfield_lookup_postcodeanywhere_country_data')) && !$reset) {
    $countries = $cached_countries->data;
    return $countries;
  }

  // Check the postcode anywhere configuration variables exist.
  if (!variable_get('addressfield_lookup_postcodeanywhere_license', NULL)) {
    throw new Exception('Postcode Anywhere has not been configured.');
  }

  // Get the API wrapper.
  $pca_predict = new PCAPredictAdapter(variable_get('addressfield_lookup_postcodeanywhere_license', NULL), variable_get('addressfield_lookup_postcodeanywhere_login', NULL), $language->name);

  // Get and parse the countries list.
  $api_countries = $pca_predict->getCountryData();

  if (!is_array($api_countries)) {
    return FALSE;
  }

  // Filter by the quality parameter.
  $api_countries = array_filter($api_countries, function ($api_country) use ($quality) {
    return $api_country->Addressing >= $quality;
  });

  // Build out countries list.
  $countries = array();

  foreach ($api_countries as $api_country) {
    $countries[$api_country->Country] = $api_country->Name;
  }

  // Cache the countries list. Note the missing cache length, we'll just keep
  // this permanently until the next cache clear.
  cache_set($countries_cache_id, $countries, 'cache_addressfield_lookup_postcodeanywhere_country_data');

  return $countries;
}
